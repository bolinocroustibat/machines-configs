
## 2. W

- name: Get image version from running container
  command: docker exec pihole cat /etc/pihole/versions
  register: pihole_package
  ignore_errors: true

- name: Extract version
  set_fact:
    pihole_version: "{{ pihole_package.stdout.split('\n')[0] | regex_search('v([0-9.]+)', '\\1') | first }}"
  when: pihole_package.rc == 0

- name: Show current Pi-hole version
  debug:
    msg: "Pi-hole is running version {{ pihole_version | default('unknown') }}"

- name: Include Pi-hole secrets
  include_vars: secrets.yaml

- name: Ensure Pi-hole directory exists
  file:
    path: "/opt/pi-hole"
    state: directory
    mode: u=rwx,g=,o= # 700 (only the user can read, write and execute)

- name: Copy docker-compose.yml
  template:
    src: docker-compose.yml.j2
    dest: "/opt/pi-hole/docker-compose.yml"
    mode: u=rw,g=r,o=r # 644

- name: Pull latest Pi-hole image
  community.docker.docker_image:
    name: pihole/pihole:latest
    source: pull
    force_source: true
  register: pihole_image_result

- name: Get version from latest pulled image
  command: docker run --rm pihole/pihole:latest cat /etc/pihole/versions
  register: latest_package
  when: pihole_image_result.changed

- name: Extract latest version
  set_fact:
    latest_version: "{{ latest_package.stdout.split('\n')[0] | regex_search('v([0-9.]+)', '\\1') | first }}"
  when: pihole_image_result.changed and latest_package.rc == 0

- name: Show latest Pi-hole version
  debug:
    msg: "Latest Pi-hole version: {{ latest_version | default('unknown') }} (updating from {{ pihole_version | default('unknown') }})"
  when: pihole_image_result.changed

- name: "Stop and remove existing Pi-hole container (updating to {{ latest_version | default('latest') }})"
  community.docker.docker_container:
    name: pihole
    state: absent
  ignore_errors: true
  when: pihole_image_result.changed

- name: "Recreate Pi-hole container with new image (version {{ latest_version | default('latest') }})"
  community.docker.docker_compose_v2:
    project_src: "/opt/pi-hole"
    state: present
    remove_orphans: true
    build: "never"
    pull: "always"
    recreate: always
  notify: Reload nginx config
  when: pihole_image_result.changed

- name: "Clean up old Pi-hole images (keeping version {{ latest_version | default('latest') }})"
  shell: |
    # Get the current image ID being used by the container
    CURRENT_IMAGE=$(docker inspect pihole --format="{{.Image}}")

    # Remove all pihole images except the current one
    docker images pihole/pihole --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | grep -v "$CURRENT_IMAGE" | awk '{print $1}' | xargs -r docker rmi
  args:
    executable: /bin/bash
  ignore_errors: true
  when: pihole_image_result.changed
