- name: Include Pi-hole secrets
  include_vars: secrets.yaml

- name: Ensure Pi-hole directory exists
  file:
    path: "/opt/pi-hole"
    state: directory
    mode: u=rwx,g=,o= # 700 (only the user can read, write and execute)

- name: Copy docker-compose.yml
  template:
    src: docker-compose.yml.j2
    dest: "/opt/pi-hole/docker-compose.yml"
    mode: u=rw,g=r,o=r # 644

- name: Pull latest Pi-hole image
  community.docker.docker_image:
    name: pihole/pihole:latest
    source: pull
    force_source: true
  register: pihole_image_result

- name: Stop and remove existing Pi-hole container
  community.docker.docker_container:
    name: pihole
    state: absent
  ignore_errors: true
  when: pihole_image_result.changed

- name: Recreate Pi-hole container with new image
  community.docker.docker_compose_v2:
    project_src: "/opt/pi-hole"
    state: present
    remove_orphans: true
    build: "never"
    pull: "always"
    recreate: always
  notify: Reload nginx config
  when: pihole_image_result.changed

- name: Clean up old Pi-hole images only
  shell: |
    # Get the current image ID being used by the container
    CURRENT_IMAGE=$(docker inspect pihole --format='{{.Image}}')

    # Remove all pihole images except the current one
    docker images pihole/pihole --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | grep -v "$CURRENT_IMAGE" | awk '{print $1}' | xargs -r docker rmi
  args:
    executable: /bin/bash
  ignore_errors: true
  when: pihole_image_result.changed
