- name: Include OwnTracks secrets
  include_vars: secrets.yaml

- name: Create OwnTracks directory
  file:
    path: "/opt/owntracks"
    state: directory
    mode: u=rwx,g=,o= # 700 (only the user can read, write and execute)

- name: Copy docker-compose.yml
  template:
    src: docker-compose.yml.j2
    dest: "/opt/owntracks/docker-compose.yml"
    mode: u=rw,g=r,o=r # 644
  notify: restart owntracks

- name: Start OwnTracks container
  community.docker.docker_compose_v2:
    project_src: "/opt/owntracks"
    state: present
    remove_orphans: true
    build: "never"
    pull: "always"
    recreate: always

- name: Check if DNS is properly configured
  command: dig +short {{ owntracks_domain }}
  register: owntracks_dns_check
  changed_when: false
  failed_when: owntracks_dns_check.stdout == ""

- name: Check if SSL certificate exists
  stat:
    path: "/etc/letsencrypt/live/{{ owntracks_domain }}/fullchain.pem"
  register: owntracks_ssl_cert_exists

- name: Deploy Nginx vhost for OwnTracks (only if SSL doesn't exist)
  template:
    src: "{{ owntracks_domain }}.conf.j2"
    dest: "/etc/nginx/sites-available/{{ owntracks_domain }}.conf"
    mode: u=rw,g=r,o=r  # 644
  notify: Reload nginx config
  when: not owntracks_ssl_cert_exists.stat.exists

- name: Enable Nginx vhost for OwnTracks (only if SSL doesn't exist)
  file:
    src: "/etc/nginx/sites-available/{{ owntracks_domain }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ owntracks_domain }}.conf"
    state: link
    force: true
  notify: Reload nginx config
  when: not owntracks_ssl_cert_exists.stat.exists

- name: Configure SSL with Certbot (only if SSL doesn't exist)
  command: certbot --nginx -d {{ owntracks_domain }} --non-interactive --agree-tos --email me@adriencarpentier.com
  args:
    creates: "/etc/letsencrypt/live/{{ owntracks_domain }}/fullchain.pem"
  when: owntracks_dns_check.stdout != "" and not owntracks_ssl_cert_exists.stat.exists
